openapi: 3.0.0
info:
  title: Averroes Taks APIs docs
  version: 0.1.0
servers:
  - url: 'http://localhost:8080'
components:
  securitySchemes:
    bearerAuth:
      type: http
      name: bearer
      bearerFormat: JWT
      in: header
paths:
  /status:
    get:
      summary: Returns if the server is healthy or not
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                age:
                  type: number
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /users/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Wrong password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /users/watchlist/add:
    post:
      summary: Add a movie to user's watchedlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: number
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: internal server error while inserting to db
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /movies/:id:
    get:
      summary: Get movie by id
      parameters:
        - id:
          name: id
          in: path
          required: true
          description: The ID of the movie to return.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  name:
                    type: string
                  description:
                    type: string
                  cover:
                    type: string
                  rate:
                    type: number
                  date:
                    type: date
                  userCreatedId:
                    type: number
  /movies/list:
    get:
      summary: List all movies
      parameters:
        - sortBy:
          name: sortBy
          in: query
          description: Sorting the movies, value can either be date or rate.
        - dir:
          name: dir
          in: query
          description: The direction of sorting, value can either be asc, or desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                        name:
                          type: string
                        description:
                          type: string
                        cover:
                          type: string
                        rate:
                          type: number
                        date:
                          type: date
                        userCreatedId:
                          type: number
  /movies/add:
    post:
      summary: Add new movie to movies list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                cover:
                  type: string
                date:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: internal server error while inserting to db
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /movies/review:
    post:
      summary: Add a review to a movie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: number
                rate:
                  type: number
                review:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /movies/edit/:id:
    post:
      summary: Update a movie.
      parameters:
        - id:
          name: id
          in: path
          required: true
          description: The ID of the movie to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                cover:
                  type: string
                date:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: internal server error while inserting to db
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /movies/delete/:id:
    delete:
      summary: Delete a movie.
      parameters:
        - id:
          name: id
          in: path
          required: true
          description: The ID of the movie to update.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string